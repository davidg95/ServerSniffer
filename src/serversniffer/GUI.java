/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package serversniffer;

import java.awt.Component;
import java.awt.Desktop;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author David
 */
public class GUI extends javax.swing.JFrame {

    private final DefaultListModel addressesModel;
    private final DefaultListModel possibleModel;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        addressesModel = new DefaultListModel();
        possibleModel = new DefaultListModel();
        lstAddresses.setModel(addressesModel);
        lstPossibleAddresses.setModel(possibleModel);
        ClassLoader classLoader = getClass().getClassLoader();
//        setIconImage(new ImageIcon(getClass().getClassLoader().getResource("resources/favicon.ico")).getImage());
    }

    public void log(String text) {
        SwingUtilities.invokeLater(() -> {
            txtLog.append(text + "\n");
        });
    }

    public void bar(int value) {
        SwingUtilities.invokeLater(() -> {
            prgBar.setValue(prgBar.getValue() + value);
        });
    }

    public void addAddress(String ip) {
        SwingUtilities.invokeLater(() -> {
            addressesModel.addElement(ip);
            lstAddresses.setModel(addressesModel);
            lblFound.setText("Servers Found: " + addressesModel.size());
        });
    }

    public void addPossibleAddresses(String ip) {
        SwingUtilities.invokeLater(() -> {
            possibleModel.addElement(ip);
            lstPossibleAddresses.setModel(possibleModel);
            lblPossibleFound.setText("Servers Found: " + possibleModel.size());
        });
    }

    public void showDialog(String text) {
        JOptionPane.showMessageDialog(this, text, "ServerSniffer", JOptionPane.ERROR_MESSAGE);
    }

    public void complete() {
        prgBar.setValue(100);
        btnStop.setEnabled(false);
        panelScan.setEnabled(true);
        for (Component comp : panelScan.getComponents()) {
            comp.setEnabled(true);
        }
        lblMessage.setText("Scan Complete!");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelScan = new javax.swing.JPanel();
        txtPort = new javax.swing.JTextField();
        lblPort = new javax.swing.JLabel();
        lblIterations = new javax.swing.JLabel();
        txtIterations = new javax.swing.JTextField();
        txtTimeout = new javax.swing.JTextField();
        lblTimeout = new javax.swing.JLabel();
        btnScan = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        chkResults = new javax.swing.JCheckBox();
        prgBar = new javax.swing.JProgressBar();
        btnClose = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        lblFound = new javax.swing.JLabel();
        lblPossibleFound = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstAddresses = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstPossibleAddresses = new javax.swing.JList<>();
        btnStop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ServerSniffer");
        setMaximumSize(new java.awt.Dimension(1000, 1000));
        setResizable(false);

        panelScan.setBorder(javax.swing.BorderFactory.createTitledBorder("Enter New Scan"));
        panelScan.setMaximumSize(new java.awt.Dimension(417, 95));
        panelScan.setMinimumSize(new java.awt.Dimension(417, 95));
        panelScan.setPreferredSize(new java.awt.Dimension(417, 95));

        txtPort.setToolTipText("Must be in range 0 - 65535");

        lblPort.setText("Port:");

        lblIterations.setText("Addresses To Scan:");

        txtIterations.setToolTipText("The number of addresses to scan");

        txtTimeout.setText("200");
        txtTimeout.setToolTipText("The timeout value for each connection");

        lblTimeout.setText("Timeout Value (ms):");

        btnScan.setText("Start Scan");
        btnScan.setToolTipText("Start a scan");
        btnScan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScanActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setToolTipText("Clear the window");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        chkResults.setText("Save results to text file");
        chkResults.setToolTipText("Check this box if you want results saved to a text file");
        chkResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkResultsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelScanLayout = new javax.swing.GroupLayout(panelScan);
        panelScan.setLayout(panelScanLayout);
        panelScanLayout.setHorizontalGroup(
            panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelScanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblIterations)
                    .addComponent(lblPort)
                    .addComponent(lblTimeout))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelScanLayout.createSequentialGroup()
                        .addComponent(chkResults)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(panelScanLayout.createSequentialGroup()
                        .addGroup(panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTimeout, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                            .addComponent(txtPort)
                            .addComponent(txtIterations))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnScan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20))))
        );
        panelScanLayout.setVerticalGroup(
            panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelScanLayout.createSequentialGroup()
                .addGroup(panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelScanLayout.createSequentialGroup()
                        .addGroup(panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPort))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIterations)
                            .addComponent(txtIterations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelScanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTimeout))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkResults))
                    .addGroup(panelScanLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnScan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        prgBar.setPreferredSize(null);

        btnClose.setText("Close");
        btnClose.setToolTipText("Exit the application");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtLog.setEditable(false);
        txtLog.setColumns(20);
        txtLog.setLineWrap(true);
        txtLog.setRows(5);
        txtLog.setPreferredSize(null);
        jScrollPane3.setViewportView(txtLog);

        jLabel1.setText("Servers-");

        jLabel2.setText("Possible Servers-");

        lblFound.setText("Servers Found: 0");

        lblPossibleFound.setText("Servers Found: 0");

        lstAddresses.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstAddresses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstAddressesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(lstAddresses);

        lstPossibleAddresses.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstPossibleAddresses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstPossibleAddressesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lstPossibleAddresses);

        btnStop.setText("Stop Scan");
        btnStop.setToolTipText("Stop the current scan");
        btnStop.setEnabled(false);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelScan, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                        .addComponent(btnStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClose))
                    .addComponent(jScrollPane3)
                    .addComponent(prgBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFound, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPossibleFound)
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelScan, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(prgBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPossibleFound)
                    .addComponent(lblFound))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnStop))
                    .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnScanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScanActionPerformed
        if (txtPort.getText().equals("")
                || txtIterations.getText().equals("")
                || txtTimeout.getText().equals("")) {
            lblMessage.setText("Please enter all required fields");
        } else {
            Pattern pattern = Pattern.compile("^([0-9])+$");
            Matcher m1 = pattern.matcher(txtPort.getText());
            Matcher m2 = pattern.matcher(txtIterations.getText());
            Matcher m3 = pattern.matcher(txtTimeout.getText());

            if (m1.find() && m2.find() && m3.find()) {
                int port = Integer.parseInt(txtPort.getText());
                int iterations = Integer.parseInt(txtIterations.getText());
                int timeout = Integer.parseInt(txtTimeout.getText());

                if (port > 65535) {
                    showDialog("Port must be in range 0 - 65535");
                } else {
                    prgBar.setValue(0);
                    btnStop.setEnabled(true);
                    panelScan.setEnabled(false);
                    for (Component comp : panelScan.getComponents()) {
                        comp.setEnabled(false);
                    }
                    txtLog.setText("");
                    addressesModel.setSize(0);
                    possibleModel.setSize(0);
                    lstAddresses.setModel(addressesModel);
                    lstPossibleAddresses.setModel(possibleModel);
                    lblMessage.setText("");
                    lblFound.setText("Servers Found: 0");
                    lblPossibleFound.setText("Servers Found: 0");

                    ServerSniffer ss = new ServerSniffer(port, iterations, timeout);
                    new Thread() {
                        @Override
                        public void run() {
                            ss.start();
                        }
                    }.start();
                }
            } else {
                lblMessage.setText("Please only enter numerical values");
            }
        }
    }//GEN-LAST:event_btnScanActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtPort.setText("");
        txtIterations.setText("");
        txtTimeout.setText("200");
        prgBar.setValue(0);
        txtLog.setText("");
        addressesModel.setSize(0);
        possibleModel.setSize(0);
        lstAddresses.setModel(addressesModel);
        lstPossibleAddresses.setModel(possibleModel);
        lblFound.setText("Servers Found: 0");
        lblPossibleFound.setText("Servers Found: 0");
        lblMessage.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        ServerSniffer.run = false;
    }//GEN-LAST:event_btnStopActionPerformed

    private void chkResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkResultsActionPerformed
        ServerSniffer.save = chkResults.isSelected();
    }//GEN-LAST:event_chkResultsActionPerformed

    private void lstAddressesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstAddressesMouseClicked
        if (evt.getClickCount() == 2 && !addressesModel.isEmpty()) {
            String address = lstAddresses.getSelectedValue();
            try {
                Desktop.getDesktop().browse(new URI(new URL(address).toString()));
            } catch (URISyntaxException | IOException ex) {
                showDialog("Error Opening URL " + address);
            }
        }
    }//GEN-LAST:event_lstAddressesMouseClicked

    private void lstPossibleAddressesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lstPossibleAddressesMouseClicked
        if (evt.getClickCount() == 2 && !possibleModel.isEmpty()) {
            String address = lstPossibleAddresses.getSelectedValue();
            try {
                Desktop.getDesktop().browse(new URI(new URL(address).toString()));
            } catch (URISyntaxException | IOException ex) {
                showDialog("Error Opening URL " + address);
            }
        }
    }//GEN-LAST:event_lstPossibleAddressesMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnScan;
    private javax.swing.JButton btnStop;
    private javax.swing.JCheckBox chkResults;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblFound;
    private javax.swing.JLabel lblIterations;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblPort;
    private javax.swing.JLabel lblPossibleFound;
    private javax.swing.JLabel lblTimeout;
    private javax.swing.JList<String> lstAddresses;
    private javax.swing.JList<String> lstPossibleAddresses;
    private javax.swing.JPanel panelScan;
    private javax.swing.JProgressBar prgBar;
    private javax.swing.JTextField txtIterations;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtTimeout;
    // End of variables declaration//GEN-END:variables
}
